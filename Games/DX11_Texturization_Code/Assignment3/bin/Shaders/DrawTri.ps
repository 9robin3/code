
Texture2D texDiffuse : register(t0);
Texture2D texNormal : register(t1);
SamplerState texSampler : register(s0);
SamplerState texSampler2 : register(s1);


struct PSIn
{
	float4 Pos  : SV_Position;
	float3 WorldPos : POS;
	float3 Normal : NORMAL;
	float2 TexCoord : TEX;

};

cbuffer MaterialBuffer : register(b0)
{
   float4 Ka, Kd, Ks;
}

cbuffer CameraBuffer : register(b1)
{
    float4 light_pos;
	float4 camera_pos;
	//float2 padding;
}

//-----------------------------------------------------------------------------------------
// PixelShader: PSSceneMain
//-----------------------------------------------------------------------------------------
float4 PS_main(PSIn input) : SV_Target
{	
    float4 texDiffuseColor = texDiffuse.Sample(texSampler, input.TexCoord);

	float3 L = normalize(light_pos - input.WorldPos);
	float3 N = normalize(input.Normal);
	float3 V = normalize(camera_pos - input.WorldPos);
	float3 R = reflect(-L, N);
	float a = 500;

	float4 Id = saturate( Kd * dot(input.Normal, L));
	float4 Is = saturate(Ks * pow(dot(R,V), a));
	float4 I = Ka + Id + Is;

	return texDiffuseColor * I;
	//return float4(input.Normal * 0.5f + 0.5f, 1);
}